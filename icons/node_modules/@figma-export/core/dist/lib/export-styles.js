"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.styles = void 0;
const figma_1 = require("./figma");
const figmaStyles_1 = require("./figmaStyles");
const styles = ({ token, fileId, version, onlyFromPages = [], outputters = [], log = (msg) => {
    // eslint-disable-next-line no-console
    console.log(msg);
}, }) => __awaiter(void 0, void 0, void 0, function* () {
    const client = (0, figma_1.getClient)(token);
    log('fetching document');
    const { data: { document = null } = {} } = yield client.file(fileId, { version, depth: 1 }).catch((error) => {
        throw new Error(`while fetching file "${fileId}${version ? `?version=${version}` : ''}": ${error.message}`);
    });
    if (!document) {
        throw new Error('\'document\' is missing.');
    }
    const ids = (0, figma_1.getPages)((document), { only: onlyFromPages })
        .map((page) => page.id);
    log('fetching styles');
    const styleNodes = yield (0, figmaStyles_1.fetchStyles)(client, fileId, version, onlyFromPages.length > 0 ? ids : undefined);
    log('parsing styles');
    const parsedStyles = (0, figmaStyles_1.parseStyles)(styleNodes);
    yield Promise.all(outputters.map((outputter) => outputter(parsedStyles)));
    log(`exported styles from ${fileId}`);
    return parsedStyles;
});
exports.styles = styles;
//# sourceMappingURL=export-styles.js.map