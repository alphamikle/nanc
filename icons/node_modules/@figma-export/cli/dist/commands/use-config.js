"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addUseConfig = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const figmaExport = __importStar(require("@figma-export/core"));
const addUseConfig = (prog, spinner) => prog
    .command('use-config [configFile]', undefined)
    .describe('Export using a configuration file.')
    .example('use-config')
    .example('use-config ./figmaexportrc.production.js')
    .action((configFile = '.figmaexportrc.js') => {
    const configPath = path_1.default.resolve(configFile);
    // eslint-disable-next-line import/no-dynamic-require, global-require
    const { commands = [] } = (fs_1.default.existsSync(configPath) ? require(configPath) : {});
    const baseCommandOptions = {
        token: process.env.FIGMA_TOKEN || '',
        // eslint-disable-next-line no-param-reassign
        log: (message) => { spinner.text = message; },
    };
    const commandPromises = commands.map((command) => {
        switch (command[0]) {
            case 'components':
                return () => __awaiter(void 0, void 0, void 0, function* () {
                    yield figmaExport.components(Object.assign(Object.assign({}, baseCommandOptions), command[1]));
                    spinner.succeed().start();
                });
            case 'styles':
                return () => __awaiter(void 0, void 0, void 0, function* () {
                    yield figmaExport.styles(Object.assign(Object.assign({}, baseCommandOptions), command[1]));
                    spinner.succeed().start();
                });
            default:
                throw new Error(`Command ${command[0]} is not found.`);
        }
    });
    spinner.start();
    commandPromises.reduce((actualPromise, nextPromise) => actualPromise.finally(nextPromise), Promise.resolve()).then(() => {
        spinner.succeed('done');
    }).catch((error) => {
        spinner.fail();
        // eslint-disable-next-line no-console
        console.error(error);
    });
});
exports.addUseConfig = addUseConfig;
//# sourceMappingURL=use-config.js.map